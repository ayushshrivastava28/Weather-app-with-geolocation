{"version":3,"sources":["Components/pin.png","Components/Form.js","Components/Geolocation.js","Components/fetchWeather.js","Components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Form","props","style","padding","opacity","onSubmit","getWeather","disabled","height","marginTop","src","img","type","name","placeholder","useGeoLocation","useState","loaded","coordinates","lat","lng","location","setLocation","onSuccess","coords","latitude","longitude","onError","error","code","message","useEffect","navigator","geolocation","getCurrentPosition","FetchWeather","temperature","setTemperature","city","setCity","humidity","setHumidity","pressure","setPressure","setDesc","setError","sunrise","setSunrise","sunset","setSunset","weatherCondition","setWeatherCondition","useGeolocation","foreData","setForeData","API_KEY","classes","useStyles","api","forecast","fetch","then","res","json","data","console","log","parseInt","main","temp","weather","description","Date","sys","toLocaleTimeString","slice","icon","catch","e","data2","JSON","stringify","list","a","preventDefault","target","elements","value","api_call","forecast_api_call","forecastData","className","AppBar","position","color","breakPoints","itemsToShow","pagination","showArrows","focusOnSelect","map","key","index","Grid","container","direction","justify","alignItems","tr","margin","temp_min","temp_max","desc","i","alt","root","CardContent","Paper","paper","item","xs","Typography","labels","datasets","borderColor","backgroundColor","options","legend","display","tooltips","enabled","scales","yAxes","ticks","stepSize","xAxes","autoSkip","maxTicksLimit","marginRight","marginLeft","variant","component","makeStyles","theme","flexGrow","spacing","textAlign","paperBox","background","Card","App","clasName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f08f3c1b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/pin.f9700a28.png\";","import React from \"react\";\r\nimport img from './pin.png'\r\n\r\nconst Form = props => (\r\n    <form style={{ padding: \"5px\", opacity: 0.8 }} onSubmit={props.getWeather} >\r\n        <button disabled><img style={{ height: \"15px\", marginTop: '10%' }} src={img} /></button>\r\n        <input style={{ height: \"20px\" }} type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        <button style={{ height: \"25px\" }}>Get Weather</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React, { useState, useEffect } from \"react\";\r\n\r\nconst useGeoLocation = () => {\r\n    const [location, setLocation] = useState({\r\n        loaded: false,\r\n        coordinates: { lat: \"\", lng: \"\" },\r\n    });\r\n\r\n    const onSuccess = (location) => {\r\n        setLocation({\r\n            loaded: true,\r\n            coordinates: {\r\n                lat: location.coords.latitude,\r\n                lng: location.coords.longitude,\r\n            },\r\n        });\r\n    };\r\n\r\n    const onError = (error) => {\r\n        setLocation({\r\n            loaded: true,\r\n            error: {\r\n                code: error.code,\r\n                message: error.message,\r\n            },\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!(\"geolocation\" in navigator)) {\r\n            onError({\r\n                code: 0,\r\n                message: \"Geolocation not supported\",\r\n            });\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\r\n    }, []);\r\n\r\n    return location;\r\n};\r\n\r\nexport default useGeoLocation;","import React, { useState, useEffect } from 'react'\r\nimport Form from './Form'\r\nimport useGeolocation from './Geolocation'\r\nimport { Line } from 'react-chartjs-2';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Carousel from 'react-elastic-carousel'\r\nimport './Card.css'\r\nconst FetchWeather = () => {\r\n    const [temperature, setTemperature] = useState(\"\")\r\n    const [city, setCity] = useState(\"\")\r\n    const [humidity, setHumidity] = useState(\"\")\r\n    const [pressure, setPressure] = useState(\"\")\r\n    const [desc, setDesc] = useState(\"\")\r\n    const [error, setError] = useState(\"\")\r\n    const [sunrise, setSunrise] = useState(\"\")\r\n    const [sunset, setSunset] = useState(\"\")\r\n    const [weatherCondition, setWeatherCondition] = useState('')\r\n    const location = useGeolocation()\r\n    const [foreData, setForeData] = useState([])\r\n    // const [dailyData, setDailyData] = useState({});\r\n    const API_KEY = \"3fec51114041e81201e3a872ce22b26e\";\r\n    const classes = useStyles();\r\n    // console.log(\"weather: \", weatherCondition)\r\n\r\n\r\n    useEffect(() => {\r\n        if (location.loaded) {\r\n            const api = city ? `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric` : `http://api.openweathermap.org/data/2.5/weather?lat=${location.coordinates.lat}&lon=${location.coordinates.lng}&appid=${API_KEY}&units=metric`\r\n            const forecast = city ? `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric` : `http://api.openweathermap.org/data/2.5/forecast?lat=${location.coordinates.lat}&lon=${location.coordinates.lng}&appid=${API_KEY}&units=metric`\r\n            fetch(api).then((res) => res.json()).then((data) => {\r\n                console.log(data)\r\n                console.log(api)\r\n                setCity(data.name);\r\n                setTemperature(parseInt(data.main.temp));\r\n                setHumidity(data.main.humidity);\r\n                setPressure(data.main.pressure)\r\n                setDesc(data.weather[0].description)\r\n                setSunrise(new Date(data.sys.sunset * 1000).toLocaleTimeString().slice(0, 4))\r\n                setSunset(new Date(data.sys.sunrise * 1000).toLocaleTimeString().slice(0, 4))\r\n                setWeatherCondition(data.weather[0].icon)\r\n                setError('')\r\n            }).catch((e) => { });\r\n\r\n            fetch(forecast).then((res) => res.json()).then((data2) => {\r\n                console.log(\"data2\" + JSON.stringify(data2))\r\n                setForeData(data2.list)\r\n                setError('')\r\n            }).catch((e) => { console.log(e.message) });\r\n        }\r\n    }, [location])\r\n\r\n    const getWeather = async (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        const api = city ? `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric` : `http://api.openweathermap.org/data/2.5/weather?lat=${location.coordinates.lat}&lon=${location.coordinates.lng}&appid=${API_KEY}&units=metric`\r\n        const api_call = await fetch(api);\r\n        const data = await api_call.json();\r\n        console.log(\"data: \", data)\r\n\r\n        //forcast data\r\n        const forecast = city ? `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}&units=metric` : `http://api.openweathermap.org/data/2.5/forecast?lat=${location.coordinates.lat}&lon=${location.coordinates.lng}&appid=${API_KEY}&units=metric`\r\n        const forecast_api_call = await fetch(forecast)\r\n        const forecastData = await forecast_api_call.json()\r\n        console.log(\"forecast: \", forecastData)\r\n\r\n        if (city) {\r\n            setCity(data.name);\r\n            setTemperature(parseInt(data.main.temp));\r\n            setHumidity(data.main.humidity);\r\n            setPressure(data.main.pressure)\r\n            setDesc(data.weather[0].description)\r\n            setSunrise(new Date(data.sys.sunset * 1000).toLocaleTimeString().slice(0, 4))\r\n            setSunset(new Date(data.sys.sunrise * 1000).toLocaleTimeString().slice(0, 4))\r\n            setWeatherCondition(data.weather[0].icon)\r\n            setForeData(forecastData.list)\r\n            setError('')\r\n        } else {\r\n            setCity('');\r\n            setTemperature('');\r\n            setHumidity('');\r\n            setPressure('')\r\n            setDesc('')\r\n            setSunrise('')\r\n            setSunset('')\r\n            setWeatherCondition('')\r\n            setForeData({})\r\n            setError('Please enter the values.')\r\n        }\r\n    }\r\n\r\n    console.log(\"data to be mapped: \", foreData)\r\n    // console.log(\"indexing: \", foreData[0].main.temp)\r\n    return (\r\n        <div className='app-container'>\r\n            <div className='container'>\r\n                <AppBar position=\"static\" color=\"inherit\">\r\n                    <Form getWeather={getWeather} />\r\n                </AppBar>\r\n                <div style={{ height: \"100px\" }}>\r\n                    {foreData ? (<Carousel breakPoints={foreData} itemsToShow={4} pagination={false} showArrows={false} focusOnSelect={true}>\r\n                        {foreData.map((key, index) => {\r\n                            return (\r\n                                <>\r\n                                    <Grid key={index} container direction=\"row\" justify=\"space-around\" alignItems=\"center\" className={classes.tr}>\r\n                                        <Card style={{ height: \"60px\", margin: '1px', padding: \"50px\", margin: \"1px\", marginRight: \"55%\", backgroundColor: '#fff' }}>{parseInt(key.main.temp_min) + \"° \"}\r\n                                            {parseInt(key.main.temp_max) + '°'}\r\n                                            {key.weather.map((desc, i) => {\r\n                                                return (\r\n                                                    <>\r\n                                                        <div key={i} >{<img style={{ height: \"40px\" }} src={`http://openweathermap.org/img/wn/${desc.icon}@2x.png`} alt=\"icon\" />}</div>\r\n                                                        <div key={i + 1}>{desc.main}</div>\r\n                                                    </>\r\n                                                )\r\n                                            })}\r\n                                        </Card>\r\n                                    </Grid>\r\n\r\n\r\n\r\n                                </>\r\n                            )\r\n                        })}\r\n                    </Carousel>) : null}\r\n                </div>\r\n\r\n                <Card className={classes.root}>\r\n                    <CardContent style={{ marginTop: '10%' }}>\r\n                        <Paper className={classes.paper}>\r\n                            <Grid item xs container direction=\"row\" >\r\n                                <Typography><h1>{temperature + '°'} C </h1></Typography>\r\n                                <img src={`http://openweathermap.org/img/wn/${weatherCondition}@2x.png`} alt=\"icon\" />\r\n                            </Grid>\r\n                            <Grid>\r\n                                {foreData[0] ? (\r\n                                    <Line\r\n                                        data={{\r\n                                            labels: foreData.map((data) => data.main.temp),\r\n                                            datasets: [{\r\n                                                data: foreData.map((data) => data.main.temp_max),\r\n                                                borderColor: 'blue',\r\n                                                backgroundColor: '#fff',\r\n                                                // fill: true,\r\n                                                // hidden: true\r\n                                            },\r\n\r\n                                            ],\r\n                                        }}\r\n                                        options={{\r\n                                            legend: {\r\n                                                display: false\r\n                                            },\r\n                                            tooltips: {\r\n                                                enabled: false\r\n                                            },\r\n                                            scales: {\r\n                                                yAxes: [{\r\n                                                    ticks: {\r\n                                                        display: false,\r\n                                                        stepSize: 2\r\n\r\n                                                    }\r\n                                                }],\r\n                                                xAxes: [{\r\n                                                    ticks: {\r\n                                                        autoSkip: true,\r\n                                                        maxTicksLimit: 6,\r\n                                                        stepSize: 2\r\n\r\n                                                    }\r\n                                                }]\r\n                                            },\r\n\r\n                                        }}\r\n                                    />\r\n                                ) : null\r\n                                }\r\n                            </Grid>\r\n\r\n                            <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\r\n                                <Card style={{ padding: \"10px\", margin: \"10px\", marginRight: \"55%\", backgroundColor: '#ced6db' }}>Pressure{\" \" + pressure + \" hpa\"}</Card>\r\n                                <Card style={{ padding: \"10px\", margin: \"10px\", marginLeft: \"55%\", marginTop: '-31%', backgroundColor: '#ced6db' }}>Humidity{\" \" + humidity + \"%\"}</Card>\r\n                            </Grid>\r\n\r\n                        </Paper>\r\n                        <Grid container direction=\"row\" justify=\"space-around\" alignItems=\"center\">\r\n                            <Card style={{ padding: \"10px\", margin: \"10px\", marginRight: \"50%\" }}>Sunrise{\" \" + sunrise + \" \"}am</Card>\r\n                            <Card style={{ padding: \"10px\", margin: \"10px\", marginLeft: \"50%\", marginTop: '-18%' }}>Sunset{\" \" + sunset + \" \"}pm</Card>\r\n                        </Grid>\r\n                        <Typography variant=\"h5\" component=\"h2\">\r\n                            {error}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default FetchWeather\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        height: '100%'\r\n    },\r\n    paper: {\r\n\r\n        padding: theme.spacing(4),\r\n        direction: 'row',\r\n        textAlign: 'center',\r\n    },\r\n    paperBox: {\r\n        padding: theme.spacing(1)\r\n    },\r\n    tr: {\r\n        background: \"#f1f1f1\",\r\n        // width: '100%',\r\n        '&:hover': {\r\n            background: \"#0394fc\",\r\n        },\r\n    },\r\n})\r\n);","import React from 'react'\r\nimport './Card.css'\r\nimport Fetch from './fetchWeather'\r\n\r\nexport default function Card() {\r\n    return (\r\n        <div className='app-container'>\r\n            <div className='container'>\r\n                <Fetch />\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport Card from './Components/Card';\nimport \"./App.css\"\n\nfunction App() {\n  return (\n    <div clasName=\"App\">\n      <Card />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}